<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="salesPersonYChartDataSource.SelectCommand" xml:space="preserve">
    <value>SELECT     TOP (5) C.FirstName + ' ' + COALESCE (C.MiddleName, '') + ' ' + C.LastName AS FullName, SUM(SOH.SubTotal) AS SaleAmount
FROM         Sales.SalesPerson AS SP INNER JOIN
                      HumanResources.Employee AS E ON SP.SalesPersonID = E.EmployeeID INNER JOIN
                      Person.Contact AS C ON E.ContactID = C.ContactID INNER JOIN
                      Sales.SalesOrderHeader AS SOH ON SP.SalesPersonID = SOH.SalesPersonID
WHERE     (YEAR(SOH.OrderDate) = @Year)
GROUP BY C.FirstName + ' ' + COALESCE (C.MiddleName, '') + ' ' + C.LastName
ORDER BY SaleAmount DESC</value>
  </data>
  <data name="salesPersonQChartDataSource.SelectCommand" xml:space="preserve">
    <value>SELECT  TOP (5) SalesPersonFullName, Q1, Q2, Q3, Q4, Q1 + Q2 + Q3 + Q4 AS Total
FROM    (SELECT  SalesPersonFullName, COALESCE([1], 0) / 1000 AS Q1, COALESCE([2], 0) / 1000 AS Q2, COALESCE([3], 0) / 1000 AS Q3, COALESCE([4], 0) / 1000 AS Q4
         FROM    (SELECT  C.FirstName + ' ' + COALESCE (C.MiddleName, '') + ' ' + C.LastName AS SalesPersonFullName, 
                          SUM(SOH.SubTotal) AS SaleAmount, CAST((MONTH(SOH.OrderDate) - 1) / 3 AS int) + 1 AS Q
                  FROM    Sales.SalesPerson AS SP INNER JOIN
                          HumanResources.Employee AS E ON SP.SalesPersonID = E.EmployeeID INNER JOIN
                          Person.Contact AS C ON E.ContactID = C.ContactID INNER JOIN
                          Sales.SalesOrderHeader AS SOH ON SP.SalesPersonID = SOH.SalesPersonID
                  WHERE   YEAR(SOH.OrderDate) = @Year AND YEAR(SOH.OrderDate) = @Year
                  GROUP BY C.FirstName + ' ' + COALESCE (C.MiddleName, '') + ' ' + C.LastName, CAST((MONTH(SOH.OrderDate) - 1) / 3 AS int) + 1
                  ) A PIVOT (SUM(SaleAmount) FOR Q IN ([1], [2], [3], [4])) AS pvt
        ) B
ORDER BY Total DESC</value>
  </data>
  <data name="salesPersonDataSource.SelectCommand" xml:space="preserve">
    <value>SELECT     C.FirstName + ' ' + COALESCE (C.MiddleName, '') + ' ' + C.LastName AS SalesPersonFullName, SOH.OrderDate, SOH.SubTotal
FROM         Sales.SalesPerson AS SP INNER JOIN
                      HumanResources.Employee AS E ON SP.SalesPersonID = E.EmployeeID INNER JOIN
                      Person.Contact AS C ON E.ContactID = C.ContactID INNER JOIN
                      Sales.SalesOrderHeader AS SOH ON SP.SalesPersonID = SOH.SalesPersonID</value>
  </data>
  <data name="storeYChartDataSource.SelectCommand" xml:space="preserve">
    <value>SELECT     TOP (5) SS.Name AS StoreName, SUM(SOH.SubTotal) AS SaleAmount
FROM         Sales.Store AS SS INNER JOIN
                      Sales.SalesOrderHeader AS SOH ON SS.CustomerID = SOH.CustomerID
WHERE     (YEAR(SOH.OrderDate) = @Year)
GROUP BY SS.Name
ORDER BY SaleAmount DESC</value>
  </data>
  <data name="storeQChartDataSource.SelectCommand" xml:space="preserve">
    <value>SELECT  TOP (5) StoreName, Q1, Q2, Q3, Q4, Q1 + Q2 + Q3 + Q4 AS Total
FROM    (SELECT  StoreName, 
                 COALESCE([1], 0) / 1000 AS Q1, 
                 COALESCE([2], 0) / 1000 AS Q2, 
                 COALESCE([3], 0) / 1000 AS Q3, 
                 COALESCE([4], 0) / 1000 AS Q4
         FROM    (SELECT  SS.Name AS StoreName, 
                          SUM(SOH.SubTotal) AS SaleAmount, 
                          CAST((MONTH(SOH.OrderDate) - 1) / 3 AS int) + 1 AS Q
                  FROM    Sales.Store AS SS INNER JOIN
                          Sales.SalesOrderHeader AS SOH ON SS.CustomerID = SOH.CustomerID
                  WHERE   YEAR(SOH.OrderDate) = @Year
                  GROUP BY SS.Name, CAST((MONTH(SOH.OrderDate) - 1) / 3 AS int) + 1
                  ) A PIVOT (SUM(SaleAmount) FOR Q IN ([1], [2], [3], [4])) AS pvt
        ) B
ORDER BY Total DESC</value>
  </data>
  <data name="productYChartDataSource.SelectCommand" xml:space="preserve">
    <value>SELECT     TOP (5) P.Name AS ProductName, SUM(SOD.LineTotal) AS SaleAmount
FROM         Production.Product AS P INNER JOIN
                      Sales.SalesOrderDetail AS SOD ON P.ProductID = SOD.ProductID INNER JOIN
                      Sales.SalesOrderHeader AS SOH ON SOD.SalesOrderID = SOH.SalesOrderID
WHERE     (YEAR(SOH.OrderDate) = @Year)
GROUP BY P.Name
ORDER BY SaleAmount DESC</value>
  </data>
  <data name="productQChartDataSource.SelectCommand" xml:space="preserve">
    <value>SELECT  TOP (5) ProductName, Q1, Q2, Q3, Q4, Q1 + Q2 + Q3 + Q4 AS Total
FROM    (SELECT  ProductName, COALESCE([1], 0) / 1000 AS Q1, COALESCE([2], 0) / 1000 AS Q2, COALESCE([3], 0) / 1000 AS Q3, COALESCE([4], 0) / 1000 AS Q4
         FROM    (SELECT     P.Name AS ProductName, SUM(SOD.LineTotal) AS SaleAmount, CAST((MONTH(SOH.OrderDate) - 1) / 3 AS int) + 1 AS Q
                  FROM          Production. Product AS P INNER JOIN
                                Sales.SalesOrderDetail AS SOD ON P.ProductID = SOD.ProductID INNER JOIN
                                Sales.SalesOrderHeader AS SOH ON SOD.SalesOrderID = SOH.SalesOrderID
                  WHERE      YEAR(SOH.OrderDate) = @Year
                  GROUP BY P.Name, CAST((MONTH(SOH.OrderDate) - 1) / 3 AS int) + 1
                 ) A PIVOT (SUM(SaleAmount) FOR Q IN ([1], [2], [3], [4])) AS pvt
        ) B
ORDER BY Total DESC</value>
  </data>
  <data name="productDataSource.SelectCommand" xml:space="preserve">
    <value>SELECT     P.Name AS ProductName, SOD.LineTotal, SOH.OrderDate
FROM         Production.Product AS P INNER JOIN
                      Sales.SalesOrderDetail AS SOD ON P.ProductID = SOD.ProductID INNER JOIN
                      Sales.SalesOrderHeader AS SOH ON SOD.SalesOrderID = SOH.SalesOrderID</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Value" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        /9j/4AAQSkZJRgABAgAAZABkAAD/7AARRHVja3kAAQAEAAAAPAAA/+4ADkFkb2JlAGTAAAAAAf/bAEMA
        BgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoKDBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8f
        Hx8fH//bAEMBBwcHDQwNGBAQGBoVERUaHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f
        Hx8fHx8fHx8fHx8fH//AABEIAFAAqgMBEQACEQEDEQH/xAAfAAABBQEBAQEBAQAAAAAAAAAAAQIDBAUG
        BwgJCgv/xAC1EAACAQMDAgQDBQUEBAAAAX0BAgMABBEFEiExQQYTUWEHInEUMoGRoQgjQrHBFVLR8CQz
        YnKCCQoWFxgZGiUmJygpKjQ1Njc4OTpDREVGR0hJSlNUVVZXWFlaY2RlZmdoaWpzdHV2d3h5eoOEhYaH
        iImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4eLj5OXm5+jp6vHy
        8/T19vf4+fr/xAAfAQADAQEBAQEBAQEBAAAAAAAAAQIDBAUGBwgJCgv/xAC1EQACAQIEBAMEBwUEBAAB
        AncAAQIDEQQFITEGEkFRB2FxEyIygQgUQpGhscEJIzNS8BVictEKFiQ04SXxFxgZGiYnKCkqNTY3ODk6
        Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqCg4SFhoeIiYqSk5SVlpeYmZqio6Slpqeoqaqy
        s7S1tre4ubrCw8TFxsfIycrS09TV1tfY2dri4+Tl5ufo6ery8/T19vf4+fr/2gAMAwEAAhEDEQA/APqm
        gAoAKADNABkUAc5B8RvBM+tnQ4tWibVAxT7Ph/vDtuK7P1oA6PNABmgAzQAZoAM0AGaADNABmgAzQAZo
        AM0AGaACgAoAKACgAoAKACgBKAOP+L768nwz8RPoG/8AtUWjfZ/L+/1G/b77M0AfnPbTaguoQvbPIL8S
        qYipPmebu+XHfduoA+nta/as8deDr6LQNY8P21xeW1tbmaR5pFkJeJWJYAEbjnmgCaw/bchZP9P8NlGz
        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
</value>
  </data>
</root>